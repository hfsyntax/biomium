define("common", [], function() {
    "use strict";
    return requirejs.config({
        paths: {
            react: ["//cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react-with-addons.min", "/webjars/react/0.13.0/react-with-addons"],
            lodash: ["//cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.min", "/webjars/lodash/3.6.0/lodash.min"],
            three: ["//cdnjs.cloudflare.com/ajax/libs/three.js/r72/three.min", "/webjars/three.js/r71/three.min"]
        },
        shim: {
            three: {
                exports: "THREE"
            },
            OrbitControls: ["three"],
            stats: ["three"]
        }
    }), window.onerror = function(e, t, s) {
        return console.log(e, t, s), !1
    }, {}
}), define("index", ["lodash", "react", "three", "world", "utils"], function(e, t, s, i, a) {
    var r = function(e) {
        this.lt = 0, this.ltrender = 0, this.lastSentTarget = 0, this.el = e.el, this.onSocketClose = e.onSocketClose, this.maxdt = .1, this.mode = 0, this.keys = {}, this.dt = 0, this.timestep = 1e3 / 60, this.pixelRatio = 1, this.targetFPS = 30, this.fps = this.targetFPS, this.initSocket(), this.initEvents()
    };
    r.prototype.onKeypressed = function(e) {
        if ("INPUT" != document.activeElement.nodeName) {
            if (32 == e.keyCode) {
                var t = a.Writer(5);
                t.write(10, 1), this.send(t.getArrayBuffer())
            }
            188 == e.keyCode && (this.targetFPS /= 2, this.targetFPS < 15 && (this.targetFPS = 15), this.onTargetFPS(this.targetFPS)), 190 == e.keyCode && (this.targetFPS *= 2, this.targetFPS > 120 && (this.targetFPS = 120), this.onTargetFPS(this.targetFPS))
        }
    }, r.prototype.keyEvent = function(e) {
        return this.keys[e.keyCode] = "keydown" == e.type, 32 == e.keyCode ? (e.preventDefault(), !1) : void 0
    }, r.prototype.initEvents = function() {
        window.addEventListener("keyup", this.onKeypressed.bind(this)), window.addEventListener("keyup", this.keyEvent.bind(this)), window.addEventListener("keydown", this.keyEvent.bind(this))
    }, r.prototype.registered = function(e) {
        this.world || (this.world = new i({
            el: this.el,
            width: e.size.x,
            height: e.size.y,
            foodCount: 5e3
        }), this.start())
    }, r.prototype.start = function() {
        requestAnimationFrame(this.frame.bind(this))
    }, r.prototype.setMode = function(e) {
        this.mode = e, this.onMode && this.onMode(e)
    }, r.prototype.onMessage = function(e) {
        var t = e.data;
        if (t instanceof ArrayBuffer)
            for (var s = new a.Reader(t); s.canRead(1);) {
                var i = s.read(1);
                if (1 == i) {
                    var r = s.read(2),
                        n = s.read(2),
                        o = s.read(2);
                    this.world && this.world.setViewCenter(r, n, o)
                } else if (2 == i) {
                    for (var h = [], d = s.read(2); d--;) {
                        for (var c = {
                                id: s.read(4),
                                color: s.read(1),
                                tx: s.read(2),
                                ty: s.read(2),
                                objs: []
                            }, m = s.read(1, !0); m--;) c.objs.push({
                            id: s.read(2),
                            x: s.read(2),
                            y: s.read(2),
                            m: s.read(4)
                        });
                        h.push(c)
                    }
                    this.world && this.world.updatePlayers(h), this.onUserData && this.onUserData(h)
                } else if (3 == i) {
                    for (var h = [], p = s.read(2), u = s.read(2), f = s.read(2), v = s.read(2), d = s.read(2); d--;) {
                        var w = s.read(2),
                            y = s.read(2);
                        h.push({
                            x: w,
                            y: y
                        })
                    }
                    this.world && this.world.updateFood(p, u, f, v, h)
                } else if (4 == i) {
                    for (var h = [], d = s.read(2); d--;) {
                        var w = s.read(2),
                            y = s.read(2);
                        h.push({
                            x: w,
                            y: y
                        })
                    }
                    this.world && this.world.removeFood(h)
                } else if (6 == i) {
                    var g = s.read(1);
                    2 == g && (this.uid = s.read(4)), this.setMode(g)
                }
            } else {
                var h = JSON.parse(t);
                if ("registered" == h.cmd && this.registered(h), "mode" == h.cmd && this.setMode(h.mode), void 0 != h.full && this.onFull && this.onFull(h.full), h.top && this.updateTop(h.top), h.names) {
                    var b = [];
                    l = h.names.length;
                    for (var x = 0; l > x; x += 3) b.push({
                        id: h.names[x],
                        name: h.names[x + 1],
                        skin: h.names[x + 2]
                    });
                    this.world && this.world.updateNames(b)
                }
            }
    }, r.prototype.initSocket = function() {
        this.socket = new WebSocket(("https:" == window.location.protocol ? "wss:" : "ws:") + "//" + window.location.host + "/socket"), this.socket.binaryType = "arraybuffer", this.socket.onmessage = this.onMessage.bind(this), this.socket.onclose = this.onSocketClose
    }, r.prototype.rstats = function() {}, r.prototype.update = function(e, t) {
        this.world.update(e, t), "INPUT" != document.activeElement.nodeName && ((this.keys[65] || this.keys[37]) && (this.world.camerapos.yaw.target += .05), (this.keys[68] || this.keys[39]) && (this.world.camerapos.yaw.target -= .05), (this.keys[87] || this.keys[38]) && this.world.camerapos.pitch.target > .1 && (this.world.camerapos.pitch.target -= .03), (this.keys[83] || this.keys[40]) && this.world.camerapos.pitch.target < Math.PI / 2 - .05 && (this.world.camerapos.pitch.target += .03), this.keys[189] && (this.pixelRatio *= .98, this.pixelRatio < .1 && (this.pixelRatio = .1), this.world.setPixelRatio(this.pixelRatio), this.onRES(this.pixelRatio)), this.keys[187] && (this.pixelRatio *= 1.02, this.pixelRatio > 1 && (this.pixelRatio = 1), this.world.setPixelRatio(this.pixelRatio), this.onRES(this.pixelRatio))), this.lastSentTarget + 100 < t && (this.lastSentTarget = t, this.sendTarget())
    }, r.prototype.send = function(e) {
        1 == this.socket.readyState && this.socket.send(e instanceof ArrayBuffer ? e : JSON.stringify(e))
    }, r.prototype.sendTarget = function() {
        var e = new a.Writer(5);
        e.write(1, 1), e.write(100 * this.world.target.x, 4), e.write(100 * this.world.target.y, 4), this.send(e.getArrayBuffer())
    }, r.prototype.frame = function(e) {
        requestAnimationFrame(this.frame.bind(this));
        var t = e - this.lt;
        this.dt += t, this.lt = e;
        for (var s = 0; this.dt >= this.timestep;)
            if (this.update(this.timestep, e), this.dt -= this.timestep, ++s >= 100) {
                this.dt = 0;
                break
            } e - this.ltrender > 1e3 / this.targetFPS * .95 && (this.fps = (59 * this.fps + 1e3 / (e - this.ltrender)) / 60, this.onFPS(this.fps), this.ltrender = e, this.world.render())
    }, r.prototype.sendStartPlay = function(e) {
        this.send({
            cmd: "start",
            name: e.name,
            skin: e.skin
        })
    };
    var n = t.createClass({
            displayName: "Ad",
            componentDidMount: function() {
                (window.adsbygoogle = window.adsbygoogle || []).push({})
            },
            render: function() {
                return t.createElement("ins", {
                    className: "adsbygoogle",
                    style: {
                        display: "inline-block",
                        width: "300px",
                        height: "250px"
                    },
                    "data-ad-client": "ca-pub-4004924734721357",
                    "data-ad-slot": "6190189209"
                })
            }
        }),
        o = t.createClass({
            displayName: "FbRoot",
            componentDidMount: function() {
                ! function(e, t, s) {
                    var i, a = e.getElementsByTagName(t)[0];
                    e.getElementById(s) || (i = e.createElement(t), i.id = s, i.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=1636440123306258", a.parentNode.insertBefore(i, a))
                }(document, "script", "facebook-jssdk")
            },
            render: function() {
                return t.createElement("div", {
                    id: "fb-root"
                })
            }
        }),
        h = ["jackie-chan", "ball-x2", "football", "ashoka", "troll", "pikachu", "homer", "rainbow", "pumpkin", "basketball", "face-1", "tiger", "spiderpman", "obama", "warrior", "eye", "smile", "flag-gb", "lava"],
        d = t.createClass({
            displayName: "IndexPage",
            getInitialState: function() {
                return {
                    mode: 1,
                    top: [],
                    ws: 1,
                    uid: 0,
                    mass: 0,
                    res: 1,
                    fps: 30,
                    tfps: 30,
                    full: 0
                }
            },
            componentDidMount: function() {
                var e = this;
                this.game = new r({
                    el: this.refs.screen.getDOMNode(),
                    onSocketClose: function() {
                        e.setState({
                            ws: 0
                        })
                    }
                }), this.game.updateTop = function(t) {
                    e.setState({
                        top: t
                    })
                }, this.game.onUserData = function(t) {
                    var s, i = e.game.uid;
                    for (var a in t)
                        if (t[a].id == i) {
                            s = t[a];
                            break
                        } if (s && i) {
                        var r = 0;
                        for (var a in s.objs) r += s.objs[a].m;
                        e.state.mass != r && e.setState({
                            uid: i,
                            mass: r
                        })
                    }
                }, this.game.onFPS = function(t) {
                    Math.abs(e.state.fps - t) > 1 && e.setState({
                        fps: t
                    })
                }, this.game.onTargetFPS = function(t) {
                    e.setState({
                        tfps: t
                    })
                }, this.game.onRES = function(t) {
                    e.state.res != t && e.setState({
                        res: t
                    })
                }, this.game.onFull = function(t) {
                    e.setState({
                        full: t
                    })
                }, window.game = this.game, gapi.ytsubscribe.render(this.refs.yt.getDOMNode(), {
                    channelid: "UCrClz9vWB7Y1iqU-DASJHgA",
                    layout: "default"
                })
            },
            handlePlay: function() {
                var e = this.refs.name.getDOMNode().value,
                    t = this.refs.skin.getDOMNode().value;
                localStorage.setItem("name", e), localStorage.setItem("skin", t);
                var s = this;
                this.game.onMode = function(e) {
                    s.setState({
                        mode: e
                    })
                }, this.game.sendStartPlay({
                    name: e,
                    skin: t
                })
            },
            handleReconnect: function() {
                this.setState({
                    ws: 1
                }), this.game.initSocket()
            },
            render: function() {
                var s = localStorage.getItem("name"),
                    i = localStorage.getItem("skin");
                return t.createElement("div", {
                    id: "game"
                }, t.createElement(o, null), t.createElement("div", {
                    ref: "left",
                    id: "left"
                }, t.createElement("div", {
                    id: "screen",
                    ref: "screen"
                })), t.createElement("div", {
                    className: "top"
                }, this.state.uid > 0 && t.createElement("div", {
                    className: "panel"
                }, t.createElement("div", null, "Your mass: ", t.createElement("b", null, this.state.mass))), t.createElement("div", {
                    className: "panel"
                }, t.createElement("center", null, "Top players:"), e.map(this.state.top, function(e, s) {
                    return t.createElement("div", {
                        key: "top" + s,
                        className: "toprow" + (this.state.uid == e.id ? " self" : "")
                    }, t.createElement("div", {
                        className: "topname"
                    }, "" == e.name ? "noname" : e.name), t.createElement("div", {
                        className: "topmass"
                    }, e.mass), t.createElement("div", {
                        className: "clear"
                    }))
                }.bind(this)), t.createElement("div", {
                    className: "clear"
                }))), t.createElement("div", {
                    id: "fps"
                }, "FPS: ", Math.round(this.state.fps), " / ", Math.round(this.state.tfps), t.createElement("br", null), "RES: ", Math.floor(100 * this.state.res), "%"), t.createElement("div", {
                    id: "startpanel",
                    className: 1 != this.state.mode ? "hidden" : ""
                }, t.createElement("div", {
                    className: "left"
                }, t.createElement("h3", null, t.createElement("a", {
                    href: "http://biome3d.com"
                }, "biome3d.com")), t.createElement("span", {
                    className: "txt-serverfull"
                }, "Server is ", this.state.full, "% full"), t.createElement("br", null)), t.createElement("div", {
                    className: "right"
                }, t.createElement("div", {
                    key: "yt",
                    ref: "yt"
                }), t.createElement("br", null), t.createElement("div", {
                    key: "fb-like",
                    className: "fb-like",
                    "data-href": "http://biome3d.com",
                    "data-layout": "button_count",
                    "data-action": "like",
                    "data-show-faces": "false",
                    "data-share": "true"
                })), t.createElement("div", {
                    className: "clear"
                }), t.createElement("input", {
                    ref: "name",
                    className: "",
                    type: "text",
                    placeholder: "Nick",
                    maxLength: "15",
                    defaultValue: s
                }), t.createElement("br", null), t.createElement("select", {
                    ref: "skin",
                    defaultValue: i
                }, t.createElement("option", {
                    value: ""
                }, "no skin"), e.map(h, function(e) {
                    return t.createElement("option", {
                        key: "skin-" + e,
                        value: e
                    }, e)
                })), t.createElement("br", null), t.createElement("center", null, t.createElement("button", {
                    onClick: this.handlePlay
                }, "Play")), t.createElement("div", {
                    className: "ad"
                }, t.createElement(n, null)), t.createElement("div", {
                    className: "info"
                }, "Controls:", t.createElement("br", null), "camera: arrow keys or WASD", t.createElement("br", null), "split: spacebar | move: mouse cursor", t.createElement("br", null), "resolution: -/+ | fps: < / >", t.createElement("br", null))), !this.state.ws && t.createElement("div", {
                    id: "wsdisconnect-panel"
                }, t.createElement("center", null, t.createElement("div", null, "You have been disconnected"), t.createElement("button", {
                    onClick: this.handleReconnect
                }, "Reconnect"))))
            }
        });
    t.render(t.createElement(d, null), document.body)
}), define("world", ["lodash", "three", "utils"], function(e, t, s) {
    function i(e) {
        for (var t in e) e[t].ease()
    }
    var a = function(e, t) {
        this.value = e, this.target = e, this.p = t || .12
    };
    a.prototype.ease = function() {
        this.value += (this.target - this.value) * this.p
    }, a.prototype.set = function(e) {
        this.target = e
    }, a.prototype.get = function() {
        return this.value
    };
    var r = function(e) {
        this.el = e.el, this.foodCount = e.foodCount || 1e3, this.seed = e.seed || 1234, this.size = {
            width: e.width || 1e3,
            height: e.height || 1e3
        }, this.screen = {
            width: this.el.offsetWidth,
            height: this.el.offsetHeight
        }, this.mouse = {
            x: 0,
            y: 0
        }, this.target = {
            x: 0,
            y: 0
        }, this.food = {}, this.objs = {}, this.players = {}, this.camerapos = {
            x: new a(0),
            y: new a(0),
            h: new a(100),
            pitch: new a(1),
            yaw: new a(0)
        }, this.init3D(), this.initMouse(), window.addEventListener("resize", function() {
            this.screen = {
                width: this.el.offsetWidth,
                height: this.el.offsetHeight
            }, this.renderer.setSize(this.screen.width, this.screen.height), this.camera.aspect = this.screen.width / this.screen.height, this.camera.updateProjectionMatrix()
        }.bind(this))
    };
    r.prototype.initMouse = function() {
        var e = this;
        this.mousemove = function(t) {
            e.mouse = {
                x: t.pageX / e.screen.width * 2 - 1,
                y: 2 * -(t.clientY / e.screen.height) + 1
            }
        }, this.raycaster = new t.Raycaster, window.addEventListener("mousemove", this.mousemove)
    }, r.prototype.init3D = function() {
        function e(e, s, i, a, r, n, o) {
            for (var h = [
                    [n, r],
                    [a, n],
                    [a, r]
                ], l = [], d = 0; 3 > d; d++) {
                var c = new t.ImageUtils.loadTexture(o);
                c.wrapS = c.wrapT = t.RepeatWrapping, c.repeat.set(h[d][0] / 64, h[d][1] / 64);
                var m = new t.MeshLambertMaterial({
                    map: c
                });
                l.push(m), l.push(m)
            }
            var p = new t.BoxGeometry(a, r, n),
                u = new t.Mesh(p, new t.MeshFaceMaterial(l));
            return u.position.set(e, s, i), u
        }
        this.scene = new t.Scene, this.scene.fog = new t.Fog(12112894, 100, 1e3), this.camera = new t.PerspectiveCamera(70, this.screen.width / this.screen.height, .1, 5e4), this.camera.position.set(600, 300, 600), this.camera.lookAt(new t.Vector3(500, 0, 500)), this.renderer = new t.WebGLRenderer({
            antialias: !0
        }), this.renderer.setSize(this.screen.width, this.screen.height), this.el.appendChild(this.renderer.domElement);
        var s = new t.SphereGeometry(25e3, 6, 6),
            i = new t.MeshBasicMaterial({
                color: 13426175,
                side: t.BackSide
            });
        obj = new t.Mesh(s, i), obj.position.set(this.size.width, 0, this.size.height), this.scene.add(obj);
        var a = new t.PointLight(16777215);
        a.position.set(this.size.width / 2, 1e4, this.size.height / 2), this.scene.add(a);
        var r = new t.AmbientLight(4473924);
        this.scene.add(r);
        var n = new t.ImageUtils.loadTexture("assets/images/bg010.jpg");
        n.wrapS = n.wrapT = t.RepeatWrapping, n.repeat.set(50, 50);
        var o = new t.MeshBasicMaterial({
                map: n,
                side: t.DoubleSide
            }),
            h = new t.PlaneGeometry(this.size.width, this.size.height, 1, 1),
            l = this.floor = new t.Mesh(h, o);
        l.position.x = this.size.width / 2, l.position.y = 0, l.position.z = this.size.height / 2, l.rotation.x = Math.PI / 2, l.receiveShadow = !0, this.scene.add(l);
        var d = e(-25, 25, this.size.height / 2, 50, 50, this.size.height + 100, "assets/images/wall.jpg");
        this.scene.add(d);
        var d = e(this.size.width + 25, 25, this.size.height / 2, 50, 50, this.size.height + 100, "assets/images/wall.jpg");
        this.scene.add(d);
        var d = e(this.size.width / 2, 25, -25, this.size.width, 50, 50, "assets/images/wall.jpg");
        this.scene.add(d);
        var d = e(this.size.width / 2, 25, this.size.height + 25, this.size.width, 50, 50, "assets/images/wall.jpg");
        this.scene.add(d), this.generateTrees()
    }, r.prototype.render = function() {
        var e = this.camerapos.x.value,
            s = this.camerapos.y.value,
            i = this.camerapos.h.value,
            a = this.camerapos.yaw.value,
            r = this.camerapos.pitch.value,
            n = Math.cos(a) * Math.sin(r) * i,
            o = Math.sin(a) * Math.sin(r) * i,
            h = Math.cos(r) * i;
        this.camera.position.set(e + .6 * n, .8 * h, s + .6 * o), this.camera.lookAt(new t.Vector3(e - .4 * n, 0, s - .4 * o));
        var l = 2 * this.camerapos.h.value;
        this.scene.fog.near = .5 * l, this.scene.fog.far = 1.4 * l, this.renderer.render(this.scene, this.camera)
    }, r.prototype.setPixelRatio = function(e) {
        this.renderer.setPixelRatio(e), this.renderer.setSize(this.screen.width, this.screen.height)
    }, r.prototype.getMouseOnFloor = function() {
        this.raycaster.setFromCamera(this.mouse, this.camera);
        var e = this.raycaster.intersectObjects([this.floor], !0);
        return e.length > 0 ? {
            x: e[0].point.x,
            y: e[0].point.z
        } : void 0
    }, r.prototype.update = function() {
        var e = this.getMouseOnFloor();
        e && (this.target = e), i(this.camerapos);
        for (var t in this.objs) {
            var s = this.objs[t];
            s.x.ease(), s.y.ease(), s.tx.ease(), s.ty.ease(), s.m.ease();
            var a = Math.atan2(s.tx.value - s.x.value, s.ty.value - s.y.value),
                r = a - Math.PI / 2,
                n = a + Math.PI / 2,
                o = Math.sqrt(s.m.value);
            s.mesh.position.set(s.x.value, 0, s.y.value), s.mesh.rotation.set(0, r, 0), s.mesh.scale.set(o, o, o), s.mesh2 && (s.mesh2.position.set(s.x.value, 0, s.y.value), s.mesh2.rotation.set(0, n, 0), s.mesh2.scale.set(o, o, o))
        }
    }, r.prototype.addFood = function(e) {
        var t = e.y << 16777215 + e.x;
        return void 0 == this.food[t] ? (this.food[t] = e, !0) : !1
    }, r.prototype.getFooAt = function(e, t) {
        var s = t << 16777215 + e;
        return this.food[s]
    }, r.prototype.generateFood = function() {
        for (var e = new s.Random(this.seed), t = 0; t <= this.foodCount; t++) {
            var i, a;
            do {
                i = e.range(1, this.size.width), a = e.range(1, this.size.height);
                var r = {
                    x: i,
                    y: a
                }
            } while (0 == this.addFood(r))
        }
    }, r.prototype.generateFoodObjects = function() {
        var e = new t.Geometry,
            s = new t.BoxGeometry(1, 1, 1),
            i = new t.MeshNormalMaterial,
            a = new t.Mesh(s, i);
        for (var r in this.food) {
            var n = this.food[r];
            a.position.set(n.x, 1, n.y), a.rotation.y = n.x * n.y, a.scale.set(3, 3, 3), a.updateMatrix(), e.merge(s, a.matrix)
        }
        this.scene.add(new t.Mesh(e, i))
    };
    var n = [16711680, 65280, 255, 16776960, 16711935, 65535],
        o = new t.IcosahedronGeometry(1),
        h = [];
    for (var l in n) {
        var d = n[l];
        h.push(new t.MeshLambertMaterial({
            color: d
        }))
    }
    r.prototype.updateFood = function(e, s, i, a, r) {
        for (var n in r) {
            var l = r[n].x,
                d = r[n].y,
                c = d << 16777215 + l;
            if (void 0 == this.food[c]) {
                var m = h[Math.floor((l + d) % h.length)],
                    p = new t.Mesh(o, m);
                p.position.set(l, 1, d), p.rotation.set(0, l * d, 0), p.scale.set(3, 3, 3);
                var u = {
                    x: l,
                    y: d,
                    mesh: p
                };
                this.food[c] = u, this.scene.add(u.mesh)
            }
        }
        for (var n in this.food) {
            var f = this.food[n];
            (f.x < e || f.x > i || f.y < s || f.y > a) && (this.scene.remove(f.mesh), delete this.food[n])
        }
    }, r.prototype.removeFood = function(e) {
        for (var t in e) {
            var s = e[t].x,
                i = e[t].y,
                a = i << 16777215 + s;
            void 0 != this.food[a] && (this.scene.remove(this.food[a].mesh), delete this.food[a])
        }
    };
    var c = [16711680, 65280, 255, 16776960, 16711935, 65535],
        m = new t.SphereGeometry(1, 20, 20, 0, 2 * Math.PI, 0, Math.PI / 2),
        p = [];
    for (var l in c) {
        var d = c[l];
        p.push(new t.MeshLambertMaterial({
            color: d
        }))
    }
    var u = new t.SphereGeometry(1.01, 20, 20, 1, 2 * Math.PI - 2, Math.PI / 2 - .4, .4);
    return r.prototype.updateNames = function(e) {
        for (var t in e) {
            var s, i = e[t].id;
            this.players[i] ? s = this.players[i] : (s = {
                id: i
            }, this.players[i] = s), s.name = e[t].name, s.skin = e[t].skin
        }
    }, r.prototype.updatePlayers = function(e) {
        var s = {},
            i = {};
        for (var r in e) {
            var n = e[r].id;
            i[n] = 1;
            var o = this.players[n] = this.players[n] || {
                id: n
            };
            if (o.color = e[r].color, o.objs = e[r].objs, o.tx = e[r].tx, o.ty = e[r].ty, o.skin) {
                if (!o.skinMaterial) {
                    var h = new t.ImageUtils.loadTexture("assets/images/skins/" + o.skin + ".jpg");
                    o.skinMaterial = new t.MeshLambertMaterial({
                        map: h
                    })
                }
            } else o.colorMaterial || (o.colorMaterial = p[o.color]);
            if (o.material = o.skinMaterial || o.colorMaterial, o.name && !o.nameMaterial) {
                var l = o.name,
                    d = document.createElement("canvas");
                d.width = 512, d.height = 32;
                var c = d.getContext("2d");
                c.font = "Bold 24px Arial";
                for (var f = [5, 507 - c.measureText(l).width], v = 0; 2 > v; v++) c.font = "Bold 24px Arial", c.fillStyle = "rgba(0,0,0,0.95)", c.fillText(l, f[v] + 0, 26), c.fillText(l, f[v] + 2, 26), c.fillText(l, f[v] + 0, 28), c.fillText(l, f[v] + 2, 28), c.fillStyle = "rgba(255,255,255,0.95)", c.fillText(l, f[v] + 1, 27);
                var h = new t.Texture(d);
                h.needsUpdate = !0, o.nameMaterial = new t.MeshBasicMaterial({
                    map: h,
                    side: t.DoubleSide
                }), o.nameMaterial.transparent = !0
            }
            for (var v in e[r].objs) {
                var w = e[r].objs[v],
                    n = w.id,
                    y = w.x,
                    g = w.y,
                    b = w.m;
                if (s[n] = 1, this.objs[n]) {
                    var x = this.objs[n];
                    x.x.set(y), x.y.set(g), x.tx.set(o.tx), x.ty.set(o.ty), x.m.set(b)
                } else {
                    var M = Math.sqrt(b),
                        k = new t.Mesh(m, o.material);
                    if (o.nameMaterial) {
                        var E = new t.Mesh(u, o.nameMaterial);
                        E.position.set(y, 0, g)
                    }
                    k.position.set(y, 0, g), k.scale.set(M, M, M), k.castShadow = !0;
                    var x = {
                        id: n,
                        tx: new a(o.tx),
                        ty: new a(o.ty),
                        x: new a(y),
                        y: new a(g),
                        m: new a(b),
                        mesh: k
                    };
                    E && (x.mesh2 = E), this.objs[n] = x, this.scene.add(x.mesh), x.mesh2 && this.scene.add(x.mesh2)
                }
            }
        }
        for (var r in this.players) void 0 == i[r] && delete this.players[r];
        for (var r in this.objs) void 0 == s[r] && (this.scene.remove(this.objs[r].mesh), this.scene.remove(this.objs[r].mesh2), delete this.objs[r])
    }, r.prototype.setViewCenter = function(e, t, s) {
        this.camerapos.x.set(e), this.camerapos.y.set(t), this.camerapos.h.set(s)
    }, r.prototype.addTree = function(e) {
        var s = function(e, s) {
                var i = new t.Mesh(new t.BoxGeometry(5, 100, 5), new t.MeshLambertMaterial({
                    color: 4473856,
                    emissive: 4473856
                }));
                i.position.set(e, 50, s), this.scene.add(i);
                var i = new t.Mesh(new t.BoxGeometry(15, 42, 15), new t.MeshLambertMaterial({
                    color: 2254336,
                    emissive: 2254336
                }));
                i.position.set(e, 80, s), this.scene.add(i)
            }.bind(this),
            e = [
                [100, 100],
                [150, 100],
                [100, 170],
                [130, 180],
                [200, 120]
            ];
        for (var i in e) s(this.size.width / 2 + e[i][0], this.size.height / 2 + e[i][1])
    }, r.prototype.generateTrees = function() {
        for (var e = new s.Random(7), i = new t.Geometry, a = new t.Geometry, r = new t.MeshLambertMaterial({
                color: 4473856,
                emissive: 4473856
            }), n = new t.MeshLambertMaterial({
                color: 2254336,
                emissive: 2254336
            }), o = new t.BoxGeometry(1, 1, 1), h = new t.IcosahedronGeometry(.8), l = new t.Mesh(o, r), d = new t.Mesh(o, n), c = 0; 200 > c; c++) {
            var m = e.range(10, this.size.width - 10),
                p = e.range(10, this.size.height - 10),
                u = e.range(30, 80),
                f = u / 2 + e.range(10, 50);
            l.position.set(m, u / 2, p), l.scale.set(u / 10, u, u / 10), d.position.set(m, u + f / 2, p), d.scale.set(f / 2, f, f / 2), l.updateMatrix(), d.updateMatrix(), i.merge(o, l.matrix), a.merge(h, d.matrix)
        }
        this.scene.add(new t.Mesh(i, r)), this.scene.add(new t.Mesh(a, n))
    }, r
}), define("utils", [], function() {
    function e(e) {
        var t = !0,
            s = 0,
            i = new DataView(e);
        return {
            eof: function() {
                return s >= i.byteLength
            },
            canRead: function(e) {
                return s + e <= i.byteLength
            },
            read: function(e, a) {
                var r = "get" + (a ? "Uint" : "Int") + 8 * e,
                    n = i[r](s, t);
                return s += e, n
            },
            readArray: function(e, a, r) {
                for (var n = "get" + (r ? "Uint" : "Int") + 8 * a, o = [], h = 0; e > h && this.canRead(a); h++) o.push(i[n](s, t)), s += a;
                return o
            },
            readAll: function(e, a) {
                for (var r = "get" + (a ? "Uint" : "Int") + 8 * e, n = []; this.canRead(e);) n.push(i[r](s, t)), s += e;
                return n
            }
        }
    }

    function t(e) {
        function t(e) {
            if (e + n > i) {
                i = 2 * i;
                var t = new ArrayBuffer(i);
                new Uint8Array(t).set(new Uint8Array(a)), a = t, r = new DataView(a)
            }
        }
        var s = !0,
            i = e || 32,
            a = new ArrayBuffer(i),
            r = new DataView(a),
            n = 0;
        return {
            writeArray: function(e, i, a) {
                var o = "set" + (a ? "Uint" : "Int") + 8 * i;
                for (var h in e) t(i), r[o](n, e[h], s), n += i
            },
            write: function(e, i, a) {
                var o = "set" + (a ? "Uint" : "Int") + 8 * i;
                t(i), r[o](n, e, s), n += i
            },
            getArrayBuffer: function() {
                return a.slice(0, n)
            }
        }
    }

    function s(e) {
        var t = e,
            s = 214013,
            i = 2531011;
        return {
            next: function() {
                return t = s * t + i & 4294967295, t >> 16 & 16383
            },
            range: function(e, t) {
                return (16383 * this.next() + this.next()) % (t - e) + e
            }
        }
    }
    return {
        Reader: e,
        Writer: t,
        Random: s
    }
});
